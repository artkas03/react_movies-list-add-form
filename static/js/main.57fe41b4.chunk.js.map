{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","regexp","RegExp","TextField","name","value","label","placeholder","required","onChange","isUrl","setIsLinkValid","useState","Math","random","toFixed","slice","id","touched","setTouched","errorMessage","setErrorMessage","hasError","trim","htmlFor","type","classNames","event","currentTarget","onBlur","valueStr","test","error","handleOnBlur","NewMovie","onAdd","count","setCount","setTitle","isTitleValid","setDescription","setImgUrl","isImgUrlValid","setIsImgUrlValid","setImdbUrl","isImdbUrlValid","setIsImdbUrlValid","setImdbId","isImdbIdValid","handleSubmit","preventDefault","onSubmit","disabled","App","moviesFromServer","setMovies","newMovies","handleAdd","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.57fe41b4.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n  isUrl?: boolean,\n  setIsLinkValid?: (isValid: boolean) => void;\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\n// eslint-disable-next-line max-len\nconst pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\nconst regexp = new RegExp(pattern);\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => {},\n  isUrl = false,\n  setIsLinkValid = () => {},\n}) => {\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  const [touched, setTouched] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const hasError = touched && required && (!value.trim() || errorMessage);\n\n  const handleOnBlur = (valueStr: string) => {\n    setTouched(true);\n\n    if (!valueStr.trim()) {\n      const error = `${label} is required!`;\n\n      setErrorMessage(error);\n\n      return;\n    }\n\n    if (!isUrl) {\n      setErrorMessage('');\n\n      return;\n    }\n\n    if (!regexp.test(valueStr)) {\n      const error = `${label} is not valid url!`;\n\n      setIsLinkValid(false);\n      setErrorMessage(error);\n\n      return;\n    }\n\n    setIsLinkValid(true);\n    setErrorMessage('');\n  };\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={event => onChange(event.currentTarget.value)}\n          onBlur={event => handleOnBlur(event.currentTarget.value)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{errorMessage}</p>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  onAdd: (movie: Movie) => void,\n}\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n\n  const [title, setTitle] = useState('');\n  const isTitleValid = title.trim() !== '';\n\n  const [description, setDescription] = useState('');\n\n  const [imgUrl, setImgUrl] = useState('');\n  const [isImgUrlValid, setIsImgUrlValid] = useState(false);\n\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [isImdbUrlValid, setIsImdbUrlValid] = useState(false);\n\n  const [imdbId, setImdbId] = useState('');\n  const isImdbIdValid = imdbId.trim() !== '';\n\n  const reset = () => {\n    setTitle('');\n    setDescription('');\n    setImgUrl('');\n    setImdbUrl('');\n    setImdbId('');\n    setCount(count + 1);\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const newMovie: Movie = {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    };\n\n    onAdd(newMovie);\n    reset();\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={event => handleSubmit(event)}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={setTitle}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={setDescription}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={setImgUrl}\n        isUrl\n        setIsLinkValid={setIsImdbUrlValid}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={setImdbUrl}\n        isUrl\n        setIsLinkValid={setIsImgUrlValid}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={setImdbId}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={!isTitleValid || !imgUrl\n              || !imdbUrl || !isImdbIdValid\n              || !isImgUrlValid || !isImdbUrlValid}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const [movies, setMovies] = useState<Movie[]>(moviesFromServer);\n\n  const handleAdd = (movie: Movie) => {\n    const newMovies = [\n      ...movies,\n      movie,\n    ];\n\n    setMovies(() => newMovies);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie\n          onAdd={(movie: Movie) => handleAdd(movie)}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}